import { InjectorService } from "@tsed/common/lib/platform-exceptions/services/node_modules/@tsed/di";
import { PlatformContext } from "@tsed/common/lib/platform/domain/PlatformContext";
import "@tsed/common/lib/platform-exceptions/components/ErrorFilter";
import "@tsed/common/lib/platform-exceptions/components/ExceptionFilter";
import "@tsed/common/lib/platform-exceptions/components/StringErrorFilter";
import "@tsed/common/lib/platform-exceptions/components/MongooseErrorFilter";
import { ExceptionFilterKey } from "@tsed/common/lib/platform-exceptions/domain/ExceptionFiltersContainer";
import { ExceptionFilterMethods } from "@tsed/common/lib/platform-exceptions/interfaces/ExceptionFilterMethods";
/**
 * Catch all errors and return the json error with the right status code when it's possible.
 *
 * @platform
 */
export declare class PlatformExceptions {
    types: Map<ExceptionFilterKey, ExceptionFilterMethods>;
    injector: InjectorService;
    $onInit(): void;
    catch(error: unknown, ctx: PlatformContext): void;
    resourceNotFound(ctx: PlatformContext): void;
}
