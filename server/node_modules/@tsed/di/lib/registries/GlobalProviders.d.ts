import { Registry, Type } from "@tsed/di/lib/registries/node_modules/@tsed/core";
import { Provider } from "@tsed/di/lib/class/Provider";
import { IProvider, RegistrySettings, TokenProvider, TypedProvidersRegistry } from "@tsed/di/lib/interfaces";
export declare class GlobalProviderRegistry extends Registry<Provider<any>, IProvider<any>> {
    /**
     * Internal Map
     * @type {Array}
     */
    private _registries;
    constructor();
    /**
     *
     * @param {string} type
     * @param {Type<Provider<any>>} model
     * @param options
     * @returns {Registry<Provider<any>, IProvider<any>>}
     */
    createRegistry(type: string, model: Type<Provider<any>>, options?: Partial<RegistrySettings>): TypedProvidersRegistry;
    /**
     *
     * @param {string | TokenProvider} target
     * @returns {RegistrySettings | undefined}
     */
    getRegistrySettings(target: string | TokenProvider): RegistrySettings;
    /**
     *
     * @returns {(provider: (any | IProvider<any>), instance?: any) => void}
     */
    createRegisterFn(type: string): (provider: any | IProvider<any>, instance?: any) => void;
    /**
     *
     * @param {string | TokenProvider} target
     * @returns {Registry<Provider<any>, IProvider<any>>}
     */
    getRegistry(target: string | TokenProvider): TypedProvidersRegistry;
}
/**
 *
 * @type {GlobalProviders}
 */
export declare const GlobalProviders: GlobalProviderRegistry;
