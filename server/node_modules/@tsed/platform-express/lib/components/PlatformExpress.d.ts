import { IRoute, PlatformBuilder, PlatformHandler, PlatformRequest, PlatformResponse, PlatformRouter } from "@tsed/platform-express/lib/components/node_modules/@tsed/common";
import { Type } from "@tsed/platform-express/lib/components/node_modules/@tsed/core";
import { PlatformExpressHandler, PlatformExpressRequest, PlatformExpressResponse, PlatformExpressRouter } from "@tsed/platform-express/lib/services";
/**
 * @platform
 * @express
 */
export declare class PlatformExpress extends PlatformBuilder {
    static providers: ({
        provide: typeof PlatformRouter;
        useClass: typeof PlatformExpressRouter;
    } | {
        provide: typeof PlatformHandler;
        useClass: typeof PlatformExpressHandler;
    } | {
        provide: typeof PlatformResponse;
        useClass: typeof PlatformExpressResponse;
    } | {
        provide: typeof PlatformRequest;
        useClass: typeof PlatformExpressRequest;
    })[];
    static bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<PlatformExpress>;
    protected loadRoutes(routes: IRoute[]): Promise<void>;
    private configureViewsEngine;
}
